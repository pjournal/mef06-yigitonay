mutate(biomass_lic_next = lag(biomass_daily))
raw_df %>%
transmute(date = lubridate::as_date(dt), biomass_lic) %>%
group_by(date) %>%
summarize(biomass_daily = sum(biomass_lic)) %>%
mutate(biomass_lic_next = lag(biomass_daily), percent_change = (biomass_daily / biomass_lic_next -1))
raw_df %>%
transmute(date = lubridate::as_date(dt), biomass_lic) %>%
group_by(date) %>%
summarize(biomass_daily = sum(biomass_lic)) %>%
mutate(biomass_lic_next = lag(biomass_daily), percent_change = (biomass_daily / biomass_lic_next -1)) %>%
summarize(average_change = mean(percent_change))
raw_df %>%
transmute(date = lubridate::as_date(dt), biomass_lic) %>%
group_by(date) %>%
summarize(biomass_daily = sum(biomass_lic)) %>%
mutate(biomass_lic_next = lag(biomass_daily), percent_change = (biomass_daily / biomass_lic_next -1)) %>%
summarize(average_change = mean(percent_change, rm.na = NA))
raw_df %>%
transmute(date = lubridate::as_date(dt), biomass_lic) %>%
group_by(date) %>%
summarize(biomass_daily = sum(biomass_lic)) %>%
mutate(biomass_lic_next = lag(biomass_daily), percent_change = (biomass_daily / biomass_lic_next -1)) %>%
raw_df %>%
transmute(date = lubridate::as_date(dt), biomass_lic) %>%
group_by(date) %>%
summarize(biomass_daily = sum(biomass_lic)) %>%
mutate(biomass_lic_next = lag(biomass_daily), percent_change = (biomass_daily / biomass_lic_next -1)) %>%
raw_df %>%
transmute(date = lubridate::as_date(dt), biomass_lic) %>%
group_by(date) %>%
summarize(biomass_daily = sum(biomass_lic)) %>%
mutate(biomass_lic_next = lag(biomass_daily), percent_change = (biomass_daily / biomass_lic_next -1))
raw_df <- readRDS("rp_201801_202005_df.rds")
raw_df %>%
transmute(date = lubridate::as_date(dt), biomass_lic) %>%
group_by(date) %>%
summarize(biomass_daily = sum(biomass_lic)) %>%
mutate(biomass_lic_next = lag(biomass_daily), percent_change = (biomass_daily / biomass_lic_next -1))
length(raw_df)
row_number(raw_df)
nrow(raw_df)
raw_df %>%
transmute(date = lubridate::as_date(dt), biomass_lic) %>%
group_by(date) %>%
summarize(biomass_daily = sum(biomass_lic)) %>%
mutate(biomass_lic_next = lag(biomass_daily), percent_change = (biomass_daily / biomass_lic_next -1)) %>%
slice(2:882)
raw_df %>%
transmute(date = lubridate::as_date(dt), biomass_lic) %>%
group_by(date) %>%
summarize(biomass_daily = sum(biomass_lic)) %>%
mutate(biomass_lic_next = lag(biomass_daily), percent_change = (biomass_daily / biomass_lic_next -1)) %>%
slice(2:882) %>%
summarize(mean(percent_change))
raw_df %>%
mutate(year = lubridate::year(dt))%>%
group_by(year)
raw_df %>%
mutate(year = lubridate::year(dt))%>%
group_by(year)%>%
sum()
raw_df %>%
mutate(year = lubridate::year(dt))%>%
group_by(year)%>%
filter(is_numeric()
raw_df %>%
raw_df %>%
mutate(year = lubridate::year(dt))%>%
group_by(year)%>%
filter(is_numeric)
raw_df %>%
mutate(year = lubridate::year(dt))%>%
group_by(year)%>%
filter(is_numeric)
raw_df %>%
mutate(year = lubridate::year(dt))%>%
group_by(year)%>%
sum(is_numeric)
raw_df %>%
mutate(year = lubridate::year(dt))%>%
group_by(year)%>%
sum(where(is.numeric))
raw_df %>%
mutate(year = lubridate::year(dt))%>%
group_by(year)%>%
sum(is.numeric)
raw_df %>%
mutate(year = lubridate::year(dt))%>%
group_by(year)%>%
sum(is.numeric())
raw_df %>%
transmute(sum = rowSums(across(where(is.numeric))), dt)
raw_df %>%
transmute(sum = rowSums(across(where(is.numeric))), year = lubridate::year(dt))
raw_df %>%
transmute(sum = rowSums(across(where(is.numeric))), year = lubridate::year(dt)) %>%
groupby(year)%>%
summarize(sum(sum))
raw_df %>%
transmute(sum = rowSums(across(where(is.numeric))), year = lubridate::year(dt)) %>%
group_by(year)%>%
summarize(sum(sum))
raw_df %>%
transmute(sum = rowSums(across(where(is.numeric))), year = lubridate::year(dt)) %>%
group_by(year)%>%
summarize(total_Mwh = sum(sum))%>%
transmute(year, total_Twh = total_Mwh / 1000000)
raw_df %>%
transmute(date = lubridate::as_date(dt), biomass_lic) %>%
group_by(date) %>%
summarize(biomass_daily = sum(biomass_lic)) %>%
mutate(biomass_lic_next = lag(biomass_daily), percent_change = (biomass_daily / biomass_lic_next -1)) %>%
slice(2:882) %>%
summarize(mean(percent_change))
#4_Find the yearly total production levels in TWh (Current values are in MWh. 1 GWh is 1000 MWh and 1 TWh is 1000 GWh).
#(Tip: In order to avoid a lengthy summation you can use tidyr::pivot_longer to get a long format.)
raw_df %>%
transmute(sum = rowSums(across(where(is.numeric))), year = lubridate::year(dt)) %>%
group_by(year)%>%
summarize(total_Mwh = sum(sum))%>%
transmute(year, total_Twh = total_Mwh / 1000000)
raw_df <- readRDS("rp_201801_202005_df.rds")
print(raw_df, n=3)
#1_Find the mean and standard deviation of licensed geothermal productions in all years.
#(Tip: Use lubridate::year to get years from date data.)
raw_df %>% group_by(year = lubridate::year(dt)) %>% summarize(geo_mean = mean(geothermal_lic), geo_std = sd(geothermal_lic))
#2_Find the hourly average unlicensed solar (sun_ul) production levels for May 2020.
raw_df %>%
mutate(month = lubridate::month(dt), year = lubridate::year(dt), hour = lubridate::hour(dt)) %>%
filter(month == 5 & year == 2020) %>%
group_by(hour) %>%
summarize(sun_mean = round(mean(sun_ul), 2))
#3_Find the average daily percentage change of licensed biomass (biomass_lic) in 2019.
#(e.g. Suppose daily production is 50 in day 1 and 53 in day 2, then the change should be (53-50)/50 -1 = 0.06)
#(Tip: Use lubridate::as_date to convert date time to date. Use lag and lead functions to offset values.)
raw_df %>%
transmute(date = lubridate::as_date(dt), biomass_lic) %>%
group_by(date) %>%
summarize(biomass_daily = sum(biomass_lic)) %>%
mutate(biomass_lic_next = lag(biomass_daily), percent_change = (biomass_daily / biomass_lic_next -1)) %>%
slice(2:882) %>%
summarize(mean(percent_change))
#4_Find the yearly total production levels in TWh (Current values are in MWh. 1 GWh is 1000 MWh and 1 TWh is 1000 GWh).
#(Tip: In order to avoid a lengthy summation you can use tidyr::pivot_longer to get a long format.)
raw_df %>%
transmute(sum = rowSums(across(where(is.numeric))), year = lubridate::year(dt)) %>%
group_by(year)%>%
summarize(total_Mwh = sum(sum))%>%
transmute(year, total_Twh = total_Mwh / 1000000)
library(nycflights13)
library(tidyverse)
?flights
library(nycflights13)
library(tidyverse)
?flights
library(nycflights13)
view(flights)
library(nycflights13)
view(flights)
library(nycflights13)
print(flights, n=3)
library(nycflights13)
flights %>% glimpse()
flights
flights %>%
filter(month==1, day==1)
flights %>%
filter(month==1, day==1)%>%
glimpse()
flights %>%
mutate(speed_per_hour = distance / air_time)
?flights
flights %>%
mutate(speed_per_hour = (distance / air_time)*60)
flights %>%
mutate(speed_per_hour = (distance / air_time)*60)%>%
group_by(carrier)%>%
summarize(avg_speed_carrier = mean(speed_per_hour))
flights %>%
mutate(speed_per_hour = (distance / air_time)*60)%>%
group_by(carrier)%>%
summarize(avg_speed_carrier = mean(across(where(is.na(speed_per_hour)))))
flights %>%
mutate(speed_per_hour = (distance / air_time)*60)%>%
group_by(carrier)%>%
summarize(avg_speed_carrier = mean(across(where(na.rm(speed_per_hour)))))
flights %>%
mutate(speed_per_hour = (distance / air_time)*60)%>%
group_by(carrier)%>%
summarize(avg_speed_carrier = mean(across(where((speed_per_hour))), na.rm = TRUE))
flights %>%
mutate(speed_per_hour = (distance / air_time)*60)%>%
group_by(carrier)%>%
summarize(avg_speed_carrier = mean(speed_per_hour, na.rm = TRUE))
flights %>%
mutate(speed_per_hour = (distance / air_time)*60)%>%
group_by(carrier)%>%
summarize(avg_speed_carrier = mean(speed_per_hour, na.rm = TRUE))%>%
arrange(desc(.))
flights %>%
mutate(speed_per_hour = (distance / air_time)*60)%>%
group_by(carrier)%>%
summarize(avg_speed_carrier = mean(speed_per_hour, na.rm = TRUE))%>%
arrange(desc(.avg_speed.carrier))
flights %>%
mutate(speed_per_hour = (distance / air_time)*60)%>%
group_by(carrier)%>%
summarize(avg_speed_carrier = mean(speed_per_hour, na.rm = TRUE))%>%
arrange(desc(avg_speed.carrier))
flights %>%
mutate(speed_per_hour = (distance / air_time)*60)%>%
group_by(carrier)%>%
summarize(avg_speed_carrier = mean(speed_per_hour, na.rm = TRUE))%>%
arrange(desc(avg_speed_carrier))
flights %>%
mutate(speed_per_hour = (distance / air_time)*60)%>%
group_by(carrier)%>%
summarize(avg_speed_carrier_per_hour = mean(speed_per_hour, na.rm = TRUE))%>%
arrange(desc(avg_speed_carrier_per_hour))
flights %>%
mutate(speed_per_hour = (distance / air_time)*60)%>%
group_by(carrier)%>%
summarize(avg_speed_carrier_per_hour = mean(speed_per_hour, na.rm = TRUE))%>%
arrange(desc(avg_speed_carrier_per_hour))%>%
print(.,n=3)
flights %>%
group_by(carrier)%>%
summarize(avg_delay = mean(dep_delay))
flights %>%
group_by(carrier)%>%
summarize(avg_delay = mean(dep_delay, na.rm = TRUE))
flights %>%
group_by(carrier)%>%
summarize(avg_delay = mean(dep_delay, na.rm = TRUE))%>%
arrange(desc(avg_delay))
flights %>%
group_by(origin)%>%
summarize(avg_delay_airport = mean(dep_delay, na.rm = TRUE))%>%
arrange(desc(avg_delay_airport))
flights %>%
group_by(origin)%>%
summarize(avg_delay_airport = mean(dep_delay))%>%
arrange(desc(avg_delay_airport))
flights %>%
group_by(origin)%>%
summarize(avg_delay_airport = mean(dep_delay, na.rm = TRUE))%>%
arrange(desc(avg_delay_airport))
flights %>%
unique(origin)
flights %>%
distinct(origin)
shiny::runApp('Foreign_Student')
library(readxl)
data = read_excel("foreign_students_by_nationality_2021_2022.xlsx")
data = read_excel("/docs/foreign_students_by_nationality_2021_2022.xlsx")
data = read_excel("docs/foreign_students_by_nationality_2021_2022.xlsx")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Foreign Students in Turkish Universities"),
theme = shinythemes::shinytheme("superhero"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("uni_city",
"Select City",
choices = data$city %>% unique() %>% sort()
),
selectInput("uni_type",
"Select University Type",
choices = data$type %>% unique() %>% sort()
),
selectInput("uni_name",
"Select a University",
choices = data$name %>% unique() %>% sort()
)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("barplot")
)
)
)
data
data <-  read_excel("docs/foreign_students_by_nationality_2021_2022.xlsx")
colnames(data) <- c("name", "type", "city", "country", "male", "female", "total")
data
runApp('Foreign_Student')
data <-  read_excel("docs/foreign_students_by_nationality_2021_2022.xlsx")
runApp('Foreign_Student')
runApp('Foreign_Student')
runApp('Foreign_Student')
getwd()
data <-  read_excel("/docs/foreign_students_by_nationality_2021_2022.xlsx")
data <-  read_excel("docs/foreign_students_by_nationality_2021_2022.xlsx")
data
runApp('Foreign_Student')
runApp('Foreign_Student')
data <-  read_excel("foreign_students_by_nationality_2021_2022.xlsx")
runApp('Foreign_Student')
runApp()
runApp()
runApp()
runApp()
runApp('app_simple.R')
library(shiny)
library(shinythemes)
library(dplyr)
library(tidyr)
library(readxl)
#data <-  read_excel("foreign_students_by_nationality_2021_2022.xlsx")
colnames(data) <- c("name", "type", "city", "country", "male", "female", "total")
print(str(data))
highest_country <-
data %>%
filter(city == input$uni_city,
type == input$uni_type,
name == input$uni_name) %>%
group_by(country) %>%
summarise(female = sum(female),
male = sum(male),
total = sum(total)) %>%
arrange(desc(total)) %>%
pivot_longer(c(-country, -total), names_to = "gender", values_to = "value") %>%
slice_max(total, n = 20)
highest_country <-
data %>%
filter(city == "Adana",
type == "Devlet") %>%
group_by(country) %>%
summarise(female = sum(female),
male = sum(male),
total = sum(total)) %>%
arrange(desc(total)) %>%
pivot_longer(c(-country, -total), names_to = "gender", values_to = "value") %>%
slice_max(total, n = 20)
highest_country <-
data %>%
filter(city == "Adana",
type == "Devlet") %>%
group_by(country) %>%
summarise(female = sum("female"),
male = sum("male"),
total = sum("total")) %>%
arrange(desc(total)) %>%
pivot_longer(c(-country, -total), names_to = "gender", values_to = "value") %>%
slice_max(total, n = 20)
highest_country <-
data %>%
filter(city == "Adana",
type == "Devlet") %>%
group_by(country) %>%
summarise(female = sum("female"),
male = sum("male"),
total = sum("total")) %>%
arrange(desc(total)) %>%
pivot_longer(c(-country, -total), names_to = "gender", values_to = "value") %>%
slice_max(total, n = 20)
highest_country <-
data %>%
filter(city == "Adana",
type == "DEVLET") %>%
group_by(country) %>%
summarise(female = sum(female),
male = sum(male),
total = sum(total)) %>%
arrange(desc(total)) %>%
pivot_longer(c(-country, -total), names_to = "gender", values_to = "value") %>%
slice_max(total, n = 20)
data
data$male <- as.numeric(data$male)
data$female <- as.numeric(data$female)
data$total <- as.numeric(data$total)
highest_country <-
data %>%
filter(city == "Adana",
type == "DEVLET") %>%
group_by(country) %>%
summarise(female = sum(female),
male = sum(male),
total = sum(total)) %>%
arrange(desc(total)) %>%
pivot_longer(c(-country, -total), names_to = "gender", values_to = "value") %>%
slice_max(total, n = 20)
ggplot(highest_country,
aes(x = reorder(country, total),
y = value,
fill = gender)
) +
geom_col() +
coord_flip() +
labs(x = "Nationality", y = "Number of Students")
library(ggplot2)
ggplot(highest_country,
aes(x = reorder(country, total),
y = value,
fill = gender)
) +
geom_col() +
coord_flip() +
labs(x = "Nationality", y = "Number of Students")
ggplot(highest_country,
aes(x = reorder(country, total),
y = value,
fill = gender)
) +
geom_col() +
coord_flip() +
labs(x = "Nationality", y = "Number of Students")
ggplot(highest_country,
aes(x = reorder(country, total),
y = value,
fill = gender)
) +
geom_col() +
coord_flip() +
labs(x = "Nationality", y = "Number of Students")
highest_country
data
highest_country <-
data %>%
filter(city == "ADANA",
type == "DEVLET") %>%
group_by(country) %>%
summarise(female = sum(female),
male = sum(male),
total = sum(total)) %>%
arrange(desc(total)) %>%
pivot_longer(c(-country, -total), names_to = "gender", values_to = "value") %>%
slice_max(total, n = 20)
ggplot(highest_country,
aes(x = reorder(country, total),
y = value,
fill = gender)
) +
geom_col() +
coord_flip() +
labs(x = "Nationality", y = "Number of Students")
runApp()
runApp()
data
runApp()
runApp('app_simple.R')
runApp('app_simple.R')
runApp()
runApp()
runApp()
class(data)
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinythemes)
library(dplyr)
library(tidyr)
library(readxl)
data$male <- as.numeric(data$male)
data$female <- as.numeric(data$female)
data$total <- as.numeric(data$total)
#data <-  read_excel("foreign_students_by_nationality_2021_2022.xlsx")
colnames(data) <- c("name", "type", "city", "country", "male", "female", "total")
print(str(data))
runApp()
runApp()
runApp('app_simple.R')
runApp()
runApp()
data
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data
is.na(data$name)
data[is.na(data$name),]
data[is.na(data$type),]
data[!is.na(data$type),]
runApp()
highest_country
runApp()
getwd()
setwd(/Users/yigitonay/Documents/GitHub/mef06g-time-and-space)
setwd(Users/yigitonay/Documents/GitHub/mef06g-time-and-space)
setwd("Users/yigitonay/Documents/GitHub/mef06g-time-and-space")
setwd("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space")
getwd()
rm(ls = list())
rm(list = ls())
readRDS("/docs/Project_Data/balance_sheet.rds")
readRDS("docs/Project_Data/balance_sheet.rds")
bs <- readRDS("docs/Project_Data/balance_sheet.rds")
bs %>% head()
library(dplyr)
bs %>% str()
bs$accounts %>% uniwue()
bs$accounts %>% unique()
sector_info <- readRDS("docs/Project_Data/sector_information.rds")
sector_info %>% str()
sector_info$size %>% unique()
